{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sreya\\\\Desktop\\\\automations_technical_assessment\\\\integration\\\\frontend\\\\src\\\\integrations\\\\hubspot.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { Box, Button, CircularProgress } from '@mui/material';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const HubSpotIntegration = ({\n  user,\n  org,\n  integrationParams,\n  setIntegrationParams\n}) => {\n  _s();\n  const [isConnected, setIsConnected] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [isLoadingData, setIsLoadingData] = useState(false);\n\n  // Function to open OAuth in a new window\n  const handleConnectClick = async () => {\n    try {\n      setIsConnecting(true);\n      const formData = new FormData();\n      formData.append('user_id', user);\n      formData.append('org_id', org);\n      const response = await axios.post(`http://localhost:8000/integrations/hubspot/authorize`, formData);\n      const authURL = response === null || response === void 0 ? void 0 : response.data;\n      const newWindow = window.open(authURL, 'HubSpot Authorization', 'width=600, height=600');\n\n      // Polling for the window to close\n      const pollTimer = window.setInterval(() => {\n        if ((newWindow === null || newWindow === void 0 ? void 0 : newWindow.closed) !== false) {\n          window.clearInterval(pollTimer);\n          handleWindowClosed();\n        }\n      }, 200);\n    } catch (e) {\n      var _e$response, _e$response$data;\n      setIsConnecting(false);\n      alert(e === null || e === void 0 ? void 0 : (_e$response = e.response) === null || _e$response === void 0 ? void 0 : (_e$response$data = _e$response.data) === null || _e$response$data === void 0 ? void 0 : _e$response$data.detail);\n    }\n  };\n\n  // // Function to handle logic when the OAuth window closes\n  // const handleWindowClosed = async () => {\n  //     try {\n  //         const formData = new FormData();\n  //         formData.append('user_id', user);\n  //         formData.append('org_id', org);\n  //         const response = await axios.post(`http://localhost:8000/integrations/hubspot/credentials`, formData);\n  //         const credentials = response.data; \n  //         if (credentials) {\n  //             setIsConnecting(false);\n  //             setIsConnected(true);\n  //             setIntegrationParams(prev => ({ ...prev, credentials: credentials, type: 'HubSpot' }));\n  //         }\n  //         setIsConnecting(false);\n  //     } catch (e) {\n  //         setIsConnecting(false);\n  //         alert(e?.response?.data?.detail);\n  //     }\n  // };\n\n  // New: Function to fetch HubSpot items from backend and print them\n  const handle = async () => {\n    if (!(integrationParams !== null && integrationParams !== void 0 && integrationParams.credentials)) {\n      alert(\"Please connect to HubSpot first.\");\n      return;\n    }\n    setIsLoadingData(true);\n    const formData = new FormData();\n    formData.append('credentials', JSON.stringify(integrationParams.credentials));\n    try {\n      const response = await axios.post(`http://localhost:8000/integrations/hubspot/get_hubspot_items`, formData);\n      console.log(\"HubSpot items:\", response.data);\n    } catch (e) {\n      alert(\"Failed to load HubSpot items\");\n    }\n    setIsLoadingData(false);\n  };\n  useEffect(() => {\n    setIsConnected(integrationParams !== null && integrationParams !== void 0 && integrationParams.credentials ? true : false);\n  }, [integrationParams]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mt: 2\n      },\n      children: [\"Parameters\", /*#__PURE__*/_jsxDEV(Box, {\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        sx: {\n          mt: 2\n        },\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: isConnected ? () => {} : handleConnectClick,\n          color: isConnected ? 'success' : 'primary',\n          disabled: isConnecting,\n          style: {\n            pointerEvents: isConnected ? 'none' : 'auto',\n            cursor: isConnected ? 'default' : 'pointer',\n            opacity: isConnected ? 1 : undefined\n          },\n          children: isConnected ? 'HubSpot Connected' : isConnecting ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n            size: 20\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 31\n          }, this) : 'Connect to HubSpot'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }, this), isConnected && /*#__PURE__*/_jsxDEV(Box, {\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        sx: {\n          mt: 2\n        },\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: handleLoadData,\n          disabled: isLoadingData,\n          children: isLoadingData ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n            size: 20\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 42\n          }, this) : 'Load Data'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n_s(HubSpotIntegration, \"97S0xDduAFAO8xlou9KU2DrStoM=\");\n_c = HubSpotIntegration;\nvar _c;\n$RefreshReg$(_c, \"HubSpotIntegration\");","map":{"version":3,"names":["useState","useEffect","Box","Button","CircularProgress","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","HubSpotIntegration","user","org","integrationParams","setIntegrationParams","_s","isConnected","setIsConnected","isConnecting","setIsConnecting","isLoadingData","setIsLoadingData","handleConnectClick","formData","FormData","append","response","post","authURL","data","newWindow","window","open","pollTimer","setInterval","closed","clearInterval","handleWindowClosed","e","_e$response","_e$response$data","alert","detail","handle","credentials","JSON","stringify","console","log","children","sx","mt","display","alignItems","justifyContent","variant","onClick","color","disabled","style","pointerEvents","cursor","opacity","undefined","size","fileName","_jsxFileName","lineNumber","columnNumber","handleLoadData","_c","$RefreshReg$"],"sources":["C:/Users/sreya/Desktop/automations_technical_assessment/integration/frontend/src/integrations/hubspot.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport {\r\n    Box,\r\n    Button,\r\n    CircularProgress\r\n} from '@mui/material';\r\nimport axios from 'axios';\r\n\r\nexport const HubSpotIntegration = ({ user, org, integrationParams, setIntegrationParams }) => {\r\n    const [isConnected, setIsConnected] = useState(false);\r\n    const [isConnecting, setIsConnecting] = useState(false);\r\n    const [isLoadingData, setIsLoadingData] = useState(false);\r\n\r\n    // Function to open OAuth in a new window\r\n    const handleConnectClick = async () => {\r\n        try {\r\n            setIsConnecting(true);\r\n            const formData = new FormData();\r\n            formData.append('user_id', user);\r\n            formData.append('org_id', org);\r\n            const response = await axios.post(`http://localhost:8000/integrations/hubspot/authorize`, formData);\r\n            const authURL = response?.data;\r\n\r\n            const newWindow = window.open(authURL, 'HubSpot Authorization', 'width=600, height=600');\r\n\r\n            // Polling for the window to close\r\n            const pollTimer = window.setInterval(() => {\r\n                if (newWindow?.closed !== false) { \r\n                    window.clearInterval(pollTimer);\r\n                    handleWindowClosed();\r\n                }\r\n            }, 200);\r\n        } catch (e) {\r\n            setIsConnecting(false);\r\n            alert(e?.response?.data?.detail);\r\n        }\r\n    };\r\n\r\n    // // Function to handle logic when the OAuth window closes\r\n    // const handleWindowClosed = async () => {\r\n    //     try {\r\n    //         const formData = new FormData();\r\n    //         formData.append('user_id', user);\r\n    //         formData.append('org_id', org);\r\n    //         const response = await axios.post(`http://localhost:8000/integrations/hubspot/credentials`, formData);\r\n    //         const credentials = response.data; \r\n    //         if (credentials) {\r\n    //             setIsConnecting(false);\r\n    //             setIsConnected(true);\r\n    //             setIntegrationParams(prev => ({ ...prev, credentials: credentials, type: 'HubSpot' }));\r\n    //         }\r\n    //         setIsConnecting(false);\r\n    //     } catch (e) {\r\n    //         setIsConnecting(false);\r\n    //         alert(e?.response?.data?.detail);\r\n    //     }\r\n    // };\r\n\r\n    // New: Function to fetch HubSpot items from backend and print them\r\n    const handle = async () => {\r\n        if (!integrationParams?.credentials) {\r\n            alert(\"Please connect to HubSpot first.\");\r\n            return;\r\n        }\r\n        setIsLoadingData(true);\r\n        const formData = new FormData();\r\n        formData.append('credentials', JSON.stringify(integrationParams.credentials));\r\n        try {\r\n            const response = await axios.post(\r\n                `http://localhost:8000/integrations/hubspot/get_hubspot_items`,\r\n                formData\r\n            );\r\n            console.log(\"HubSpot items:\", response.data);\r\n        } catch (e) {\r\n            alert(\"Failed to load HubSpot items\");\r\n        }\r\n        setIsLoadingData(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        setIsConnected(integrationParams?.credentials ? true : false);\r\n    }, [integrationParams]);\r\n\r\n    return (\r\n        <>\r\n        <Box sx={{mt: 2}}>\r\n            Parameters\r\n\r\n            {/* Connect Button */}\r\n            <Box display='flex' alignItems='center' justifyContent='center' sx={{mt: 2}}>\r\n                <Button \r\n                    variant='contained' \r\n                    onClick={isConnected ? () => {} : handleConnectClick}\r\n                    color={isConnected ? 'success' : 'primary'}\r\n                    disabled={isConnecting}\r\n                    style={{\r\n                        pointerEvents: isConnected ? 'none' : 'auto',\r\n                        cursor: isConnected ? 'default' : 'pointer',\r\n                        opacity: isConnected ? 1 : undefined\r\n                    }}\r\n                >\r\n                    {isConnected \r\n                        ? 'HubSpot Connected' \r\n                        : isConnecting \r\n                            ? <CircularProgress size={20} /> \r\n                            : 'Connect to HubSpot'}\r\n                </Button>\r\n            </Box>\r\n\r\n            {/* Load Data Button (only visible if connected) */}\r\n            {isConnected && (\r\n                <Box display='flex' alignItems='center' justifyContent='center' sx={{mt: 2}}>\r\n                    <Button \r\n                        variant='contained'\r\n                        color='primary'\r\n                        onClick={handleLoadData}\r\n                        disabled={isLoadingData}\r\n                    >\r\n                        {isLoadingData ? <CircularProgress size={20} /> : 'Load Data'}\r\n                    </Button>\r\n                </Box>\r\n            )}\r\n        </Box>\r\n      </>\r\n    );\r\n}\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}