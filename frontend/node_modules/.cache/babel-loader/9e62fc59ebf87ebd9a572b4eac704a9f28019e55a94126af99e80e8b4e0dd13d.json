{"ast":null,"code":"export const HubSpotIntegration = {\n  id: \"hubspot\",\n  title: \"HubSpot\",\n  description: \"Connect to HubSpot and load contacts, companies, and deals\",\n  authorize: (user, org) => {\n    // Call backend authorize endpoint\n    const formData = new FormData();\n    formData.append('user_id', user);\n    formData.append('org_id', org);\n    return fetch('/integrations/hubspot/authorize', {\n      method: 'POST',\n      body: formData\n    }).then(res => {\n      if (!res.ok) throw new Error('Authorization failed');\n      return res.json();\n    }).then(data => {\n      // Open HubSpot auth page in new window\n      window.open(data.url || '/integrations/hubspot/authorize', '_blank');\n      return {\n        type: 'hubspot'\n      };\n    });\n  },\n  fetchItems: async credentials => {\n    const formData = new FormData();\n    formData.append('credentials', JSON.stringify(credentials));\n    const res = await fetch('/integrations/hubspot/get_hubspot_items', {\n      method: 'POST',\n      body: formData\n    });\n    if (!res.ok) {\n      const txt = await res.text();\n      throw new Error(\"Failed loading HubSpot items: \" + txt);\n    }\n    const items = await res.json();\n    console.log('HubSpot items:', items);\n    return items;\n  },\n  getCredentials: async (user, org) => {\n    const formData = new FormData();\n    formData.append('user_id', user);\n    formData.append('org_id', org);\n    const res = await fetch('/integrations/hubspot/credentials', {\n      method: 'POST',\n      body: formData\n    });\n    if (!res.ok) throw new Error('Failed to get credentials');\n    return await res.json();\n  }\n};","map":{"version":3,"names":["HubSpotIntegration","id","title","description","authorize","user","org","formData","FormData","append","fetch","method","body","then","res","ok","Error","json","data","window","open","url","type","fetchItems","credentials","JSON","stringify","txt","text","items","console","log","getCredentials"],"sources":["C:/Users/sreya/Desktop/automations_technical_assessment/integration/frontend/src/integrations/hubspot.js"],"sourcesContent":["export const HubSpotIntegration = {\r\n    id: \"hubspot\",\r\n    title: \"HubSpot\",\r\n    description: \"Connect to HubSpot and load contacts, companies, and deals\",\r\n    \r\n    authorize: (user, org) => {\r\n      // Call backend authorize endpoint\r\n      const formData = new FormData();\r\n      formData.append('user_id', user);\r\n      formData.append('org_id', org);\r\n      \r\n      return fetch('/integrations/hubspot/authorize', {\r\n        method: 'POST',\r\n        body: formData\r\n      })\r\n      .then(res => {\r\n        if (!res.ok) throw new Error('Authorization failed');\r\n        return res.json();\r\n      })\r\n      .then(data => {\r\n        // Open HubSpot auth page in new window\r\n        window.open(data.url || '/integrations/hubspot/authorize', '_blank');\r\n        return { type: 'hubspot' };\r\n      });\r\n    },\r\n  \r\n    fetchItems: async (credentials) => {\r\n      const formData = new FormData();\r\n      formData.append('credentials', JSON.stringify(credentials));\r\n      \r\n      const res = await fetch('/integrations/hubspot/get_hubspot_items', {\r\n        method: 'POST',\r\n        body: formData\r\n      });\r\n      \r\n      if (!res.ok) {\r\n        const txt = await res.text();\r\n        throw new Error(\"Failed loading HubSpot items: \" + txt);\r\n      }\r\n      \r\n      const items = await res.json();\r\n      console.log('HubSpot items:', items);\r\n      return items;\r\n    },\r\n  \r\n    getCredentials: async (user, org) => {\r\n      const formData = new FormData();\r\n      formData.append('user_id', user);\r\n      formData.append('org_id', org);\r\n      \r\n      const res = await fetch('/integrations/hubspot/credentials', {\r\n        method: 'POST',\r\n        body: formData\r\n      });\r\n      \r\n      if (!res.ok) throw new Error('Failed to get credentials');\r\n      return await res.json();\r\n    }\r\n  };"],"mappings":"AAAA,OAAO,MAAMA,kBAAkB,GAAG;EAC9BC,EAAE,EAAE,SAAS;EACbC,KAAK,EAAE,SAAS;EAChBC,WAAW,EAAE,4DAA4D;EAEzEC,SAAS,EAAEA,CAACC,IAAI,EAAEC,GAAG,KAAK;IACxB;IACA,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,SAAS,EAAEJ,IAAI,CAAC;IAChCE,QAAQ,CAACE,MAAM,CAAC,QAAQ,EAAEH,GAAG,CAAC;IAE9B,OAAOI,KAAK,CAAC,iCAAiC,EAAE;MAC9CC,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEL;IACR,CAAC,CAAC,CACDM,IAAI,CAACC,GAAG,IAAI;MACX,IAAI,CAACA,GAAG,CAACC,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;MACpD,OAAOF,GAAG,CAACG,IAAI,CAAC,CAAC;IACnB,CAAC,CAAC,CACDJ,IAAI,CAACK,IAAI,IAAI;MACZ;MACAC,MAAM,CAACC,IAAI,CAACF,IAAI,CAACG,GAAG,IAAI,iCAAiC,EAAE,QAAQ,CAAC;MACpE,OAAO;QAAEC,IAAI,EAAE;MAAU,CAAC;IAC5B,CAAC,CAAC;EACJ,CAAC;EAEDC,UAAU,EAAE,MAAOC,WAAW,IAAK;IACjC,MAAMjB,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,aAAa,EAAEgB,IAAI,CAACC,SAAS,CAACF,WAAW,CAAC,CAAC;IAE3D,MAAMV,GAAG,GAAG,MAAMJ,KAAK,CAAC,yCAAyC,EAAE;MACjEC,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEL;IACR,CAAC,CAAC;IAEF,IAAI,CAACO,GAAG,CAACC,EAAE,EAAE;MACX,MAAMY,GAAG,GAAG,MAAMb,GAAG,CAACc,IAAI,CAAC,CAAC;MAC5B,MAAM,IAAIZ,KAAK,CAAC,gCAAgC,GAAGW,GAAG,CAAC;IACzD;IAEA,MAAME,KAAK,GAAG,MAAMf,GAAG,CAACG,IAAI,CAAC,CAAC;IAC9Ba,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEF,KAAK,CAAC;IACpC,OAAOA,KAAK;EACd,CAAC;EAEDG,cAAc,EAAE,MAAAA,CAAO3B,IAAI,EAAEC,GAAG,KAAK;IACnC,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,SAAS,EAAEJ,IAAI,CAAC;IAChCE,QAAQ,CAACE,MAAM,CAAC,QAAQ,EAAEH,GAAG,CAAC;IAE9B,MAAMQ,GAAG,GAAG,MAAMJ,KAAK,CAAC,mCAAmC,EAAE;MAC3DC,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEL;IACR,CAAC,CAAC;IAEF,IAAI,CAACO,GAAG,CAACC,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;IACzD,OAAO,MAAMF,GAAG,CAACG,IAAI,CAAC,CAAC;EACzB;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}